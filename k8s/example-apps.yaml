---
# Development Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: dev-apps
  labels:
    name: dev-apps
    purpose: development
---
# Production Namespace  
apiVersion: v1
kind: Namespace
metadata:
  name: prod-apps
  labels:
    name: prod-apps
    purpose: production
---
# Mock Database Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-database
  namespace: dev-apps
  labels:
    app: mock-database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mock-database
  template:
    metadata:
      labels:
        app: mock-database
    spec:
      containers:
      - name: mock-database
        image: mock-db:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 3306
          name: db
        env:
        - name: PORT
          value: "3306"
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
---
# Mock Database Service
apiVersion: v1
kind: Service
metadata:
  name: mock-database
  namespace: dev-apps
  labels:
    app: mock-database
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
    name: db
  selector:
    app: mock-database
---
# Sample App Deployment (Development)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app-dev
  namespace: dev-apps
  labels:
    app: sample-app
    environment: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-app
      environment: development
  template:
    metadata:
      labels:
        app: sample-app
        environment: development
    spec:
      initContainers:
      - name: fetch-config
        image: alpine:latest
        command: ["/bin/sh"]
        args:
          - -c
          - |
            apk add --no-cache curl
            # Fetch configuration from Yamlet
            echo "Fetching configuration from Yamlet..."
            CONFIG=$(curl -s -H "Authorization: Bearer dev-token" \
              http://yamlet-service.yamlet.svc.cluster.local:8080/namespaces/dev/configs/app.yaml)
            
            if [ $? -eq 0 ] && [ ! -z "$CONFIG" ]; then
              echo "Configuration fetched successfully"
              echo "$CONFIG" > /shared/config.yaml
              
              # Parse YAML to environment variables (simple parsing)
              echo "# Configuration from Yamlet" > /shared/app.env
              echo "$CONFIG" | while IFS=':' read -r key value; do
                if [[ $key =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]] && [[ ! $key =~ ^[[:space:]]*# ]]; then
                  clean_value=$(echo "$value" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
                  if [ ! -z "$clean_value" ]; then
                    echo "${key^^}=$clean_value" >> /shared/app.env
                  fi
                fi
              done
              
              # Handle database config
              if grep -q "database:" /shared/config.yaml; then
                db_host=$(grep -A 10 "database:" /shared/config.yaml | grep "host:" | cut -d':' -f2 | sed 's/^[[:space:]]*//')
                db_port=$(grep -A 10 "database:" /shared/config.yaml | grep "port:" | cut -d':' -f2 | sed 's/^[[:space:]]*//')
                
                if [ ! -z "$db_host" ]; then echo "DATABASE_HOST=$db_host" >> /shared/app.env; fi
                if [ ! -z "$db_port" ]; then echo "DATABASE_PORT=$db_port" >> /shared/app.env; fi
              fi
              
              echo "Environment variables prepared:"
              cat /shared/app.env
            else
              echo "Failed to fetch configuration, using defaults"
              echo "APP=sample-app" > /shared/app.env
              echo "VERSION=1.0.0" >> /shared/app.env
              echo "ENVIRONMENT=development" >> /shared/app.env
              echo "DATABASE_HOST=mock-database.dev-apps.svc.cluster.local" >> /shared/app.env
              echo "DATABASE_PORT=3306" >> /shared/app.env
            fi
        volumeMounts:
        - name: shared-config
          mountPath: /shared
      containers:
      - name: sample-app
        image: sample-app:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
          name: http
        envFrom:
        - configMapRef:
            name: sample-app-config
            optional: true
        env:
        - name: PORT
          value: "8080"
        command: ["/bin/sh"]
        args:
          - -c
          - |
            if [ -f /shared/app.env ]; then
              echo "Loading configuration from Yamlet..."
              set -a
              source /shared/app.env
              set +a
              echo "Configuration loaded:"
              env | grep -E '^(APP|VERSION|ENVIRONMENT|DATABASE_)' | sort
            fi
            echo "Starting application..."
            exec ./sample-app
        volumeMounts:
        - name: shared-config
          mountPath: /shared
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: shared-config
        emptyDir: {}
---
# Sample App Service (Development)
apiVersion: v1
kind: Service
metadata:
  name: sample-app-dev
  namespace: dev-apps
  labels:
    app: sample-app
    environment: development
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30081
    protocol: TCP
    name: http
  selector:
    app: sample-app
    environment: development
---
# ConfigMap for sample app
apiVersion: v1
kind: ConfigMap
metadata:
  name: sample-app-config
  namespace: dev-apps
data:
  app.name: "sample-app"
  app.environment: "development"
